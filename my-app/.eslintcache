[{"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\index.js":"1","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\App.js":"3","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\SectionHeader.js":"4","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\EventBoard.js":"5","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\Event.js":"6","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\TestContext.js":"7","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\ThemeContext.js":"8","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\ThemedButton.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":305,"mtime":1610942281606,"results":"13","hashOfConfig":"11"},{"size":17006,"mtime":1610695028959,"results":"14","hashOfConfig":"11"},{"size":6920,"mtime":1610876577340,"results":"15","hashOfConfig":"11"},{"size":2085,"mtime":1610869360264,"results":"16","hashOfConfig":"11"},{"size":1079,"mtime":1610957638703,"results":"17","hashOfConfig":"11"},{"size":542,"mtime":1610954688533,"results":"18","hashOfConfig":"11"},{"size":1117,"mtime":1610955148076,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"14yvquw",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\index.js",[],["40","41"],"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\App.js",["42","43"],"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\SectionHeader.js",[],"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\EventBoard.js",["44","45","46"],"import React, {useState} from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Grid,\r\n    makeStyles,\r\n    createStyles,\r\n    TextField,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport withStyles from \"@material-ui/core/styles/withStyles\"\r\nimport Event from \"./Event\";\r\n\r\nconst useStyles = (theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    testButton: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    }\r\n})\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nfunction AddDialog(props) {\r\n    const [event, setEvent] = useState({});\r\n    const handleChange = (e) => {\r\n        const target = e.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const id = target.id;\r\n\r\n        setEvent({\r\n            ...event,\r\n            [id]: value,\r\n        })\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <DialogTitle id=\"form-dialog-title\">Create Event</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    To subscribe to this website, please enter your email address here. We will send updates\r\n                    occasionally.\r\n                </DialogContentText>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"time\"\r\n                    label=\"Time\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"title\"\r\n                    label=\"Title\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    onChange={handleChange}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.toggleDialog} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => {\r\n                    props.toggleDialog();\r\n                    props.submitCreateEvent(event);\r\n                }} color=\"primary\">\r\n                    Submit\r\n                </Button>\r\n            </DialogActions>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst EventBoard = ({classes}) => {\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n    const [events, setEvents] = useState([\r\n        {\r\n            id: 1,\r\n            time: \"10:00\",\r\n            title: \"123123\",\r\n        },\r\n        {\r\n            id: 2,\r\n            time: \"11:00\",\r\n            title: \"321321\",\r\n        }\r\n    ])\r\n    // const classes = useStyles();\r\n    const toggleDialog = () => {\r\n        setOpenDialog(!openDialog)\r\n    }\r\n    const submitCreateEvent = (event) => {\r\n        let newArray = [...events];\r\n        newArray.push({\r\n            id: newArray.length ? newArray[newArray.length - 1].id + 1 : 1,\r\n            time: event.time,\r\n            title: event.title,\r\n        })\r\n\r\n        setEvents(newArray)\r\n    }\r\n    const handleDelete = (id) => {\r\n        const newEvents = events.filter(e => e.id !== id);\r\n        setEvents(newEvents);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth=\"lg\">\r\n                <Box py={6}>\r\n                    <Grid container>\r\n                        <Grid item xs={9}>\r\n                            <Typography variant=\"h3\" component=\"h3\">TODAY</Typography>\r\n                            <Box m={2} p={2} id=\"schedule-items\">\r\n                                {events.map(event => (\r\n                                    <Event\r\n                                        key={event.id}\r\n                                        id={event.id}\r\n                                        time={event.time}\r\n                                        title={event.title}\r\n                                        location={event.location}\r\n                                        description={event.description}\r\n                                        onDelete={handleDelete}\r\n                                    />\r\n                                ))}\r\n                            </Box>\r\n                            <Box textAlign=\"center\">\r\n                                <Button className={classes.testButton} onClick={toggleDialog}>\r\n                                    Add Event\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={3} container>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h3\" component=\"h3\">Schedule</Typography>\r\n                                <Typography variant=\"h6\" component=\"h6\" color=\"textSecondary\">\r\n                                    It's going to be busy that today. You have {\" \"}\r\n                                    <b>{events.length} events </b> today.\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h3\" component=\"span\">Sunny</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h3\" component=\"span\">23Â°C</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"body1\" component=\"p\">\r\n                                    Don't forget your sunglasses. Today will dry and sunny, becoming\r\n                                    warm in the afternoon with temperatures of between 20 and 25\r\n                                    degrees.\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Container>\r\n\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={toggleDialog}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <AddDialog toggleDialog={toggleDialog} submitCreateEvent={submitCreateEvent}/>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default withStyles(useStyles)(EventBoard)\r\n","C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\Event.js",[],"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\TestContext.js",["47","48"],"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\ThemeContext.js",[],"C:\\Users\\DELL\\workspace\\test-react\\my-app\\src\\components\\ThemedButton.js",["49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":21},{"ruleId":"54","severity":1,"message":"58","line":3,"column":8,"nodeType":"56","messageId":"57","endLine":3,"endColumn":18},{"ruleId":"54","severity":1,"message":"59","line":12,"column":5,"nodeType":"56","messageId":"57","endLine":12,"endColumn":15},{"ruleId":"54","severity":1,"message":"60","line":13,"column":5,"nodeType":"56","messageId":"57","endLine":13,"endColumn":17},{"ruleId":"54","severity":1,"message":"61","line":104,"column":12,"nodeType":"56","messageId":"57","endLine":104,"endColumn":22},{"ruleId":"54","severity":1,"message":"62","line":2,"column":44,"nodeType":"56","messageId":"57","endLine":2,"endColumn":52},{"ruleId":"54","severity":1,"message":"63","line":11,"column":7,"nodeType":"56","messageId":"57","endLine":11,"endColumn":19},{"ruleId":"54","severity":1,"message":"64","line":20,"column":10,"nodeType":"56","messageId":"57","endLine":20,"endColumn":28},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'SectionHeader' is defined but never used.","Identifier","unusedVar","'EventBoard' is defined but never used.","'makeStyles' is defined but never used.","'createStyles' is defined but never used.","'modalStyle' is assigned a value but never used.","'testProp' is defined but never used.","'TestContext1' is assigned a value but never used.","'ThemeTogglerButton' is defined but never used.","no-global-assign","no-unsafe-negation"]